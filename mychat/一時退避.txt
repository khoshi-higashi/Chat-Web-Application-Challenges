
<!-- チャットの処理スクリプトBEGIN -->
<script type="text/javascript">
    ////////////////////////////////////////////////////////////////////////////
    // チャットログ更新処理
    ////////////////////////////////////////////////////////////////////////////
    function setChatLog(chat_log){
        // 画面に書き出すHTMLを入れる変数
        let result = "";

        // [11-1-1] クッキーからユーザ名を取得


        // [11-1-2] 引数で受け取ったJSONデータ(chat_log)からログデータのみを抽出


        // ログをチャット画面に表示する
        logs.forEach(function (inner, index, data) {
            // ログのユーザ名(user)とログインしているユーザが一致する場合
            if(inner["user"] == user_name){
                //======================================================
                // [11-1-3] ログから各データを抜き出し以下の変数に格納する(コメントは外す)
                //let mes_id =
                //let user =
                //let message =
                //let date =
                //======================================================

                // チャット画面に表示する自分の発言ログの開始タグ
                result += "<div class=\"chat__right\">";

                // メッセージ本体
                //======================================================
                // [11-1-4] メッセージ仕様の指示に従って各データを出力するHTMLをここに挿入する


                //======================================================

                // 発言ログの終了タグ
                result += "</div>";
            }
            // 発言ログの発言者名(user)がログインユーザではない場合の発言設定
            else{
                //======================================================
                // [11-1-5] ログから各データを抜き出し以下の変数に格納する(コメントは外す)
                //let mes_id =
                //let user =
                //let message =
                //let date =
                //======================================================

                // チャット画面に表示する他者の発言ログの開始タグ
                result += "<div class=\"chat__left\">";

                // メッセージ本体
                //======================================================
                // [11-1-6] メッセージ仕様の指示に従って各データを出力するHTMLをここに挿入する


                //======================================================

                // 発言ログの終了タグ
                result += "</div>";
            }
        });

        // resultの内容でチャット欄を更新
        $("#chat_main").html(result);

        // チャット欄のスクロール位置を末尾に設定
        $("#chat_main").scrollTop($('#chat_main').get(0).scrollHeight);
    }

    ////////////////////////////////////////////////////////////////////////////
    // 削除ボタン可視化
    ////////////////////////////////////////////////////////////////////////////
    function showDeleteButton(target_message){
        if(document.getElementById(target_message).style.display == "inline"){
	        document.getElementById(target_message).style.display = "none";
	    }else{
	        document.getElementById(target_message).style.display = "inline";
	    }
    }

    ////////////////////////////////////////////////////////////////////////////
    // チャットログ取得処理
    ////////////////////////////////////////////////////////////////////////////
    function getChatMessage(){
        //======================================================
        // [10-3] Ajax通信を以下の記入エリアに書き入れる
        // ルーティングnameはgetChatMessage、ルームIDを引数として渡す
        // 返信のdatatypeは JSON を指定
        // 送信時のdataは {} を指定(なにも渡さない)
        // 通信成功時は setChatLog関数を実行する。引数はサーバから受信したデータをそのまま渡す。



        //======================================================
    }

    ////////////////////////////////////////////////////////////////////////////
    // メッセージ投稿処理
    ////////////////////////////////////////////////////////////////////////////
    function submitChatMessage(){
        //======================================================
        // [9-3-1] 以下のコメントを外して、メッセージ入力欄の内容を取得してmessageに代入する
        let message = document.getElementById("chat_comment").innerText;
        //======================================================

        //======================================================
        // 「メッセージが未記入のとき」は投稿処理はせずreturnで関数を終了する。
        // [9-3-2] 以下の3行のコメントを外し( )に条件を記述する
        if(message == ""){
           return;
        }
        //======================================================

        //======================================================
        // [9-3-3] Ajax通信を以下の記入エリアに書き入れる
        // ルーティングnameはsubmitChatMessage、ルームIDを引数として渡す
        // 返信のdatatypeは JSON を指定
        // 送信時のdataは { 'message': message } を指定
        // 通信成功時は以下を実行する。
        // (1) setChatLog関数を実行する。引数はサーバから受信したデータをそのまま渡す。
        // (2) チャットのメッセージ入力欄を空っぽにする
        $.ajax({
          url: '{% url "submitChatMessage" %}',
          type: 'GET',
          dataType: 'JSON',
          data: { 'message': message },
          timeout: 5000,
        })
        .done(function(data) {
          setChatLog(data),
        });


        //======================================================
    }

    ////////////////////////////////////////////////////////////////////////////
    // チャット発言削除処理
    ////////////////////////////////////////////////////////////////////////////
    function deleteChatMessage(mes_id){
        //======================================================
        // Ajax通信を以下の記入エリアに書き入れる
        // ルーティングnameはdeleteChatMessage、ルームIDを引数として渡す
        // 返信のdatatypeは JSON を指定
        // 送信時のdataは { 'mes_id': mes_id } を指定(mes_idは削除したいメッセージのID)
        // 通信成功時はsetChatLog関数を実行する。引数はサーバから受信したデータをそのまま渡す。



        //======================================================
    }

    ////////////////////////////////////////////////////////////////////////////
    // 定期的にログを更新するように設定
    ////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////
    // ページ読込直後の実行処理(ページを開いた初回に1度だけ実行される)
    ////////////////////////////////////////////////////////////////////////////
    getChatMessage();

</script>
<!-- チャットの処理スクリプトEND -->
